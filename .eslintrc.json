{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
	"sourceType": "module",
	"ecmaVersion": 6,
	
	// Needed for linting that
	// involves type information
	"project": ["./tsconfig.json"]
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
	// You only need these if you want to
	// apply all of them.
	// It's probably better to apply them one-by-one
	// when you know what you want.

    // "eslint:recommended",
	// // Needed for integrating eslint with TS
	// "plugin:@typescript-eslint/recommended",

    // "plugin:@typescript-eslint/eslint-recommended"
  ],
  "rules": {
   "arrow-spacing": ["warn", { "before": true, "after": true }],
	// Both KNR and Stroustrup are ok by me
	// "brace-style": ["error", "stroustrup", { "allowSingleLine": true }],
	
	// Not really concerned about that
	// "comma-dangle": ["error", "always-multiline"],
	"comma-spacing": "error",
	"comma-style": "error",
	"curly": ["error", "multi-line", "consistent"],
	"dot-location": ["error", "property"],
	"handle-callback-err": "off",
	"keyword-spacing": "error",
	"max-nested-callbacks": ["error", { "max": 4 }],
	"max-statements-per-line": ["error", { "max": 2 }],
	"no-console": "off",
	"no-floating-decimal": "error",
	"no-inline-comments": "error",
	"no-lonely-if": "error",
	"no-multi-spaces": "error",
	"no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1, "maxBOF": 0 }],
	"no-shadow": ["error", { "allow": ["err", "resolve", "reject"] }],
	"no-trailing-spaces": ["error"],
	"no-var": "error",
	"object-curly-spacing": ["error", "always"],
	"prefer-const": "error",
	// I prefer all double
	"quotes": ["error", "double"],
	"space-before-function-paren": ["error", {
		"anonymous": "never",
		"named": "never",
		"asyncArrow": "always"
	}],
	"space-in-parens": "error",
	"space-infix-ops": "error",
	"space-unary-ops": "error",
	"spaced-comment": "error",
	"yoda": "error",
	// From cs-discord-at-ucf/Lion
	// Note: When applicable, you must disable the base rule as it can report incorrect errors
	"eqeqeq": ["warn", "smart"],
	"@typescript-eslint/await-thenable": ["error"],
	"@typescript-eslint/no-extra-non-null-assertion": ["error"],
	"@typescript-eslint/no-unnecessary-type-assertion": ["error"],
	"@typescript-eslint/prefer-nullish-coalescing": ["error"],
	// Hopefully this doesn't interfere with using promise.all when
	// concurrently calling several async functions
	"@typescript-eslint/require-await": ["error"],
	"semi": "off",
	"@typescript-eslint/semi": ["error"],
	"space-before-blocks": "error",
	"no-unused-vars": "off",
	"@typescript-eslint/no-unused-vars": ["error", {"caughtErrors": "none"}],
	"@typescript-eslint/no-explicit-any": "warn",
	"@typescript-eslint/naming-convention": [
		"error",
		// private class properties and methods should
		// have leading underscores and be named with
		// camelCase or UPPER_CASE
		{
			"selector": ["classProperty", "classMethod"],
			"leadingUnderscore": "require",
			"modifiers": ["private"],
			"format": ["camelCase", "UPPER_CASE"]
		},
		// public static class properties
		// should not have leading underscores
		// and have an UPPER_CASE format
		{
			"selector": ["classProperty"],
			"modifiers": ["public", "static"],
			"leadingUnderscore": "forbid",
			"format": ["UPPER_CASE"]
		},
		// public static class methods
		// should not have leading underscores
		// and be named in camelCase
		{
			"selector": ["classMethod"],
			"modifiers": ["public", "static"],
			"leadingUnderscore": "forbid",
			"format": ["camelCase"]
		},
		// protected class properties and methods
		// should not have leading underscores
		// and be named in camelCase or UPPER_CASE
		{
			"selector": ["classProperty", "classMethod"],
			"modifiers": ["protected"],
			"leadingUnderscore": "forbid",
			"format": ["UPPER_CASE", "camelCase"]
		},
		// public class properties and methods
		// should not have leading underscores
		// and be named in camelCase or UPPER_CASE
		{
			"selector": ["classProperty", "classMethod"],
			"modifiers": ["public"],
			"leadingUnderscore": "forbid",
			"format": ["UPPER_CASE", "camelCase"]
		},
		// interfaces should be PascalCase or UPPER_CASE
		{
			"selector": ["interface"],
			"format": ["PascalCase", "UPPER_CASE"]
		}
	]
  }
}

// Copied from lion
// {
//   "env": {
//     "commonjs": true,
//     "es6": true,
//     "node": true,
//     "jest": true
//   },
//   // "extends": ["prettier"],
//   "globals": {
//     "Atomics": "readonly",
//     "SharedArrayBuffer": "readonly"
//   },
//   "rules": {
//     "eqeqeq": ["warn", "smart"],
//     "eol-last": ["error"],
//     "@typescript-eslint/await-thenable": ["error"],
//     "@typescript-eslint/no-extra-non-null-assertion": ["error"],
//     "@typescript-eslint/no-unnecessary-type-assertion": ["error"],
//     "@typescript-eslint/prefer-nullish-coalescing": ["error"],
//     "@typescript-eslint/require-await": ["error"],
//     "curly": "warn",
//     "no-var": 2,
//     "prefer-const": "error",
//     // note you must disable the base rule as it can report incorrect errors
//     "semi": "off",
//     "@typescript-eslint/semi": ["error"],
//     "space-before-blocks": "error",
//     "spaced-comment": "warn",
//     "quotes": "off",
//     "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }],
//     // note you must disable the base rule as it can report incorrect errors
//     "no-unused-vars": "off",
//     "@typescript-eslint/no-unused-vars": ["error", { "caughtErrors": "none" }],
//     "@typescript-eslint/no-explicit-any": "error",
//     "@typescript-eslint/naming-convention": [
//       "error",
//       {
//         "selector": ["classProperty", "classMethod"],
//         "format": ["camelCase", "UPPER_CASE"],
//         "leadingUnderscore": "require",
//         "modifiers": ["private"]
//       },
//       {
//         "selector": ["classProperty"],
//         "format": ["UPPER_CASE"],
//         "modifiers": ["public", "static"],
//         "leadingUnderscore": "forbid"
//       },
//       {
//         "selector": ["classMethod"],
//         "format": ["camelCase"],
//         "modifiers": ["public", "static"],
//         "leadingUnderscore": "forbid"
//       },
//       {
//         "selector": ["classProperty", "classMethod"],
//         "format": ["UPPER_CASE", "camelCase"],
//         "modifiers": ["protected"],
//         "leadingUnderscore": "forbid"
//       },
//       {
//         "selector": ["classProperty", "classMethod"],
//         "format": ["UPPER_CASE", "camelCase"],
//         "modifiers": ["public"],
//         "leadingUnderscore": "forbid"
//       },
//       {
//         "selector": ["interface"],
//         "format": ["PascalCase", "UPPER_CASE"],
//         "prefix": ["I"]
//       }
//     ]
//   },
//   "parser": "@typescript-eslint/parser",
//   "plugins": ["@typescript-eslint"],
//   "parserOptions": {
//     "ecmaVersion": 6,
//     "sourceType": "module",
//     "project": "./tsconfig.json"
//   }
// }